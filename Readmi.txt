PROYECTO INDIVIDUAL Nº1
Machine Learning Operations (MLOps)
El proyecto consite en trabajar como Data Scientist en una empresa denominado
Steam, una plataforma multinacional devideojuegos. En este primer modelo de ML para solucionar un problema de negocio: Steam me pide que me encargue de crear un sistema de recomendación de videojuegos para usuarios.
para tal objetivo Steam me provee de 3 archivos en formato JSON mal estructurados, datos anidados, de tipo raw, como así tambien no hay procesos automatizados para la actualización de nuevos productos.

Bueno, manos a la Obra!!
Descargo los archivos y la sorpresa es mas grande de lo que pensaba, para tratar de trabajarlo de una mejor manera, la descomprimo resultando 2 de ellas de un tamaño superior a los 500MB.
para tener un primer pantallazo de los contenidos, abrí los archivos con un procesador de textos plano(bloc de notas). 
en la misma pude ir identificando las columnas pertenecientes a los diferentes archivos, en todos los casos tambien conformados por datos anidados y diccionarios. 
Sinceramente, nunaca trate con este tipo de archivos tan mal estructuradas. 
Luego de tener mas o menos un panorama del contenido de los archivos, ejecute mi VSCODE para iniciar con el ETL con Python y la libreria de Pandas. 
Este proceso fue muy complicado, ya que no podía leer los archivos. Investigando por distintos lados, como así tambien con las colaboraciones de mis compañeros de grupo, logre pasar a DF uno de los archivos el user_reviews.json, como no estaba seguro de que datos 
mantener, eliminar o convertir cada modificacion iba exportando en csv, tal es así que en un momento llegue a tener mas de 30 csv exportados con diferentes modificaciones y tamaños, pero luego fuí descartando.
Luego de varios días de tambien puede abrir y cargarlos a un DF los archivos steam_games.json y users_items.json.
Respecto al steam_games y user_reviews, lo cargue directamente sin descomprimirlo con las importaciones de pandas, gzip y ast.
Al archivo User_reviews, le realice un ETL dejando las columnas y renombrando algunas, tambien realice extracciones de la columna reviews, que era un diccionario de listas, de las claves posted, review, recommend e item_id
con las respectivas transformaciones a formato fecha de la clave Posted, luego extrayendo toda la inforamacion y renombrando una columna como fecha_convertida.
elimine valores nulos de Recommend, formatee la clave review, ya que de esos comentarios realice un analisis de Sentimientos.las columnas resultantes quedaron de la siguiente manera: user_id,item_id,recommend,review,fecha_convertida.
El archivo output_steam_games.json, lo extraje de la carpeta comprimida y lo pase al df, verificando muchas incoherencias y faltantes de datos en varias columnas, por una cuestion de practicidad y para evitar redundancias en los datos, eliminé la columna items con sus respectivas 
lista de diccionarios y posteriormente uni a traves de la columna itmen_id los archivos steam_games y User_reviews, quedando las siguientes columnas: user_id,item_id,recommend,review,fecha_convertida,publisher,genres,app_name,title,url,release_date,tags,reviews_url,discount_price,specs,price,early_access,id,metascore,developer,playtime_forever
Todas estas columnas con sus respectivos datos lo determine acorde a las necesidades para las funciones solicitados por Steam.
En el archivo User_reviews se crea la columna 'sentiment_analysis'aplicando análisis desentimiento con NLP con la siguiente escala: debe tomar el valor '0' si es malo, '1' si esneutral y '2' si es positivo.
este analisis lo realice con la instalacion e importacion de Texblob, que a mi parecer fue bastante acertado con los resultados, este analisis lo exporte a un archivo csv nombrado user_reviews_with_sentiment.csv.

Desarrollo API
: Propones disponibilizar los datos de la empresa usando el framework
FastAPI
. Las consultas que propones son las siguientes:
def userdata(User_id: str): Debe devolver cantidad de dinero gastado por elusuario, el porcentaje
de recomendación en base a reviews.recommend y cantidad de items


def
countreviews(
YYYY-MM-DD
y
YYYY-MM-DD
: str
)
:
Cantidad de usuarios
querealizaron reviews entre las fechas dadas y, el
porcentaje
de recomendación de losmismos en base a reviews.recommend.
def
genre(
género
: str
)
: Devuelve el
puesto
en el que se encuentra un género sobreel ranking de los mismos analizado bajo la columna PlayTimeForever.
def
userforgenre(
gén
Top 5
de usuarios con más horas de juego en elgénero dado, con su URL (del user) y user_id.
def
developer(desarrollador: str
Cantidad
de items y
porcentaje
de contenidoFree por año según empresa desarrolladora. Ejemplo de salida:
Activision
Año
Contenido Free

def
sentiment_analysis(año: int): Según el año de lanzamiento, se devuelve una listacon la cantidad de registros de reseñas de usuarios que se encuentren categorizadoscon un análisis de sentimiento.
